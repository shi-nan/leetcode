给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]

解1：
每次旋转一个 一共旋转k次 （暴力解决法）
class Solution {
    public void rotate(int[] nums, int k) {
        int prev,temp;
        for(int i=0;i<k;i++){
            prev=nums[nums.length-1];
            for(int j=0;j<nums.length;j++){
                temp=prev;
                prev=nums[j];
                nums[j]=temp;
            }
        }
    }
}
时间复杂度 O(n∗k)
空间复杂度 O(1)


解2：
申请一个额外空间 利用(元素现在的位置+k)%数组的长度
class Solution {
    public void rotate(int[] nums, int k) {
      int a[]=new int[nums.length];
        for(int i=0;i<nums.length;i++){
            a[(i+k)%nums.length]=nums[i];
        }
        for(int j=0;j<nums.length;j++){
            nums[j]=a[j];
        }
    }
}
时间复杂度 O(n）
空间复杂度 O(n）申请一个数组 有额外空间


解3：
这个方法基于这个事实：当我们旋转数组 k 次， k%nk\%nk%n 个尾部元素会被移动到头部，剩下的元素会被向后移动。
首先反转全部的元素
然后再反转前k个
再翻转后n-k个


假设 n=7且 k=3。

原始数组                  : 1 2 3 4 5 6 7
反转所有数字后             : 7 6 5 4 3 2 1
反转前 k 个数字后          : 5 6 7 4 3 2 1
反转后 n-k 个数字后        : 5 6 7 1 2 3 4 --> 结果


class Solution {
    public void rotate(int[] nums, int k) {
        k=k%nums.length;
        reverse(nums,0,nums.length-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.length-1);
    } 
        public void reverse(int []nums,int start,int end){
            int temp=0;
            while(start<end){
                temp=nums[start];
                nums[start]=nums[end];
                nums[end]=temp;
                start++;
                end--;     
            }
        }
}
